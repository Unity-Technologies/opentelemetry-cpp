build_linux:
  name: build linux
  agent:
    image: slough-ops/centos-7-base
    flavor: b1.large
    type: Unity::VM
  commands:
    - |
      set -euxo pipefail
      wget -O bazelisk https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-linux-amd64
      chmod +x bazelisk
      sudo yum install -y zip
      .yamato/bee steve internal-unpack public 7za-linux-x64/904b71ca3f79_0d0f2cf7ea23d00d2ba5d151c735ef9f03ed99a9e451c6dcf3a198cbedf69861.zip 7z
      export BEE_INTERNAL_STEVEDORE_7ZA=7z/7za
      .yamato/bee steve internal-unpack public toolchain-llvm-centos-amd64/9.0.1-7.7.1908_9a2f0527b0c16f2524d24e372c7ebb8735e2e85ec99b6914f2a0a00c1e74d34d.7z TC
      .yamato/bee steve internal-unpack public linux-sysroot-amd64/glibc2.17_21db091a7ba6f278ece53e4afe50f840f2ba704112aaed9562fbd86421e4ce3b.7z sysroot
      echo -e '#!/bin/bash\nexec PWD/TC/bin/clang --sysroot="PWD/sysroot" --gcc-toolchain="PWD/sysroot/usr" -I=/usr/include/c++/9.1.0 -target x86_64-glibc2.17-linux-gnu $*' > clang
      sed -i -e "s|PWD|`pwd`|g" clang
      chmod +x clang
      export COMPILATION_MODE=opt # defaults to fastbuild
      CC=`pwd`/clang ./bazelisk build //examples/otlp:libdummy_remove_me
      rm -rf trick opentelemetry-cpp-lin-amd64.zip
      mkdir -p trick/lib
      find bazel-out/ -name '*.a' -exec cp '{}' trick/lib/ ';'
      rm -f trick/lib/libdummy_remove_me.a # Don't want the custom library that we added.
      mkdir -p trick/api trick/sdk
      cp -ir api/include trick/api/
      cp -ir sdk/include trick/sdk/
      cp -ir exporters/otlp/include/opentelemetry/exporters trick/api/include/opentelemetry/
      cp -ir ext/include/opentelemetry/* trick/api/include/opentelemetry/

      # We don't support gRPC for now.
      rm -f trick/api/include/opentelemetry/exporters/otlp/otlp_grpc_exporter.h
      rm -f trick/api/include/opentelemetry/exporters/otlp/otlp_grpc_log_exporter.h
      rm -f trick/api/include/opentelemetry/exporters/otlp/otlp_grpc_exporter_options.h

      output_base=$(./bazelisk info output_base)
      searchdir="$output_base/external/com_google_protobuf/src/google/protobuf"
      find "$searchdir" -type f \( -name \*.h -o -name \*.inc \) | grep -v -e java -e csharp -e objectivec -e ruby -e unittest | while read src
      do
        dest=trick/google/protobuf/$(echo $src | sed -e "s|^$searchdir/||")
        mkdir -p "$(dirname $dest)"
        cp "$src" "$dest"
      done

      cd trick
      chmod -R u+w .
      zip -r ../opentelemetry-cpp-lin-amd64.zip *
      cd ..
  artifacts:
    opentelemetry-cpp-stevedore-pkg:
      paths:
        - opentelemetry-cpp-lin-amd64.zip
  triggers:
    expression: pull_request.target eq "unity"

build_mac_amd64:
  name: build mac amd64
  agent:
    image: build-system/unity-macos-10.15:v1.0.3-1026271
    flavor: b1.large
    type: Unity::VM::osx
  commands:
    - |
      set -euxo pipefail
      wget -O bazelisk https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-darwin-amd64
      chmod +x bazelisk
      # NOTE: when building manually on M1 macs for arm64:
      #APPLE_SDK_VERSION_OVERRIDE=11 ./bazelisk build --macos_minimum_os 11 --cpu=darwin_arm64 --host_cpu=darwin_arm64 --subcommands //examples/otlp:hw
      ./bazelisk build //examples/otlp:hw
      archname=$(arch | sed -e "s/x86_64.*/amd64/" -e "s/i386/amd64/")
      rm -rf trick opentelemetry-cpp-mac-${archname}.zip
      mkdir -p trick/lib
      find bazel-out/ -name '*.a' -exec cp '{}' trick/lib/ ';'
      mkdir -p trick/api trick/sdk
      cp -ir api/include trick/api/
      cp -ir sdk/include trick/sdk/
      cp -ir exporters/otlp/include/opentelemetry/exporters trick/api/include/opentelemetry/
      cp -ir ext/include/opentelemetry/* trick/api/include/opentelemetry/

      # We don't support gRPC for now.
      rm -f trick/api/include/opentelemetry/exporters/otlp/otlp_grpc_exporter.h
      rm -f trick/api/include/opentelemetry/exporters/otlp/otlp_grpc_log_exporter.h
      rm -f trick/api/include/opentelemetry/exporters/otlp/otlp_grpc_exporter_options.h

      output_base=$(./bazelisk info output_base)
      searchdir="$output_base/external/com_google_protobuf/src/google/protobuf"
      find "$searchdir" -type f \( -name \*.h -o -name \*.inc \) | grep -v -e java -e csharp -e objectivec -e ruby -e unittest | while read src
      do
        dest=trick/google/protobuf/$(echo $src | sed -e "s|^$searchdir/||")
        mkdir -p "$(dirname $dest)"
        cp "$src" "$dest"
      done

      cd trick
      chmod -R u+w .
      zip -r ../opentelemetry-cpp-mac-${archname}.zip *
      cd ..
  artifacts:
    opentelemetry-cpp-stevedore-pkg:
      paths:
        - "opentelemetry-cpp-mac-amd64.zip"
  triggers:
    expression: pull_request.target eq "unity"

build_windows:
  name: build windows
  agent:
    image: build-system/bee-windows-10-vs2019:v0.1.3-1006513
    flavor: b1.xlarge
    type: Unity::VM
  interpreter: powershell
  commands:
    #- choco install -y python --version 3.10.4

    # Note: ./ci/setup_windows_cmake.ps1 fails on bokken. Let's install it our own way:
    - choco install -y cmake --version 3.23.1

    - ./ci/setup_windows_ci_environment.ps1
    - ./ci/install_windows_protobuf.ps1

    - |
      cd vcpkg
      $env:VCPKG_DEFAULT_TRIPLET = "x64-windows"
      ./vcpkg install curl

    - |
      $ErrorActionPreference = "Stop"
      trap { $host.SetShouldExit(1) }
      mkdir build
      cd build
      & 'C:\Program Files\CMake\bin\cmake.exe' -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DWITH_OTLP=ON -DWITH_ZIPKIN=OFF -DWITH_JAEGER=OFF -DWITH_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=C:\build\output\Unity-Technologies\opentelemetry-cpp\installhere -DBUILD_TESTING=OFF -DCMAKE_TOOLCHAIN_FILE=C:\build\output\Unity-Technologies\opentelemetry-cpp\vcpkg\scripts\buildsystems\vcpkg.cmake -DCMAKE_VERBOSE_MAKEFILE=ON ..

    - |
      $ErrorActionPreference = "Stop"
      trap { $host.SetShouldExit(1) }
      cd build
      & 'C:\Program Files\CMake\bin\cmake.exe' --build . --config Release --target install

    - |
      #c:\Python310\python.exe .yamato\win-copy-protobuf.py C:\build\output\Unity-Technologies\opentelemetry-cpp\vcpkg\packages\protobuf_x64-windows

      Copy-Item -Force -Path vcpkg\packages\protobuf_x64-windows\lib\*.lib -Destination installhere/lib/
      Copy-Item -Force -Recurse -Path vcpkg\packages\protobuf_x64-windows\include\google -Destination installhere\google

      Copy-Item -Force -Path vcpkg\packages\curl_x64-windows\lib\*.lib -Destination installhere/lib/curl.lib

      cd installhere
      7z.exe a -tzip ../opentelemetry-cpp-win-amd64.zip *
      cd ..

    #- |
    #  $ErrorActionPreference = "Stop"
    #  curl.exe -Lo bazelisk.exe https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-windows-amd64.exe
    #  ./bazelisk.exe build //examples/otlp:hw
    #  mkdir trick
    #  mkdir trick/lib
    #  Get-ChildItem -Path bazel-out -Recurse -Filter '*.lib' -File | Copy-Item -Force -Destination trick/lib/
    #  mkdir trick/api
    #  mkdir trick/sdk
    #  Copy-Item -Force -Recurse -Path api/include -Destination trick/api/
    #  Copy-Item -Force -Recurse -Path sdk/include -Destination trick/sdk/
    #  Copy-Item -Force -Recurse -Path exporters/otlp/include/opentelemetry/exporters -Destination trick/api/include/opentelemetry/
    #  Copy-Item -Force -Recurse -Path ext/include/opentelemetry/* -Destination trick/api/include/opentelemetry/

    #  # We don't support gRPC for now.
    #  rm trick/api/include/opentelemetry/exporters/otlp/otlp_grpc_exporter.h
    #  rm trick/api/include/opentelemetry/exporters/otlp/otlp_grpc_log_exporter.h
    #  rm trick/api/include/opentelemetry/exporters/otlp/otlp_grpc_exporter_options.h

    #  mkdir trick/google
    #  mkdir trick/google/protobuf
    #  $extDir = ./bazelisk.exe info output_base
    #  c:\Python310\python.exe .yamato\win-copy-protobuf.py $extDir\external\com_google_protobuf\src\google\protobuf

    #  cd trick
    #  7z.exe a -tzip ../opentelemetry-cpp-win-amd64.zip *
    #  cd ..
  artifacts:
    opentelemetry-cpp-stevedore-pkg:
      paths:
        - "opentelemetry-cpp-win-amd64.zip"
  triggers:
    expression: pull_request.target eq "unity"
